let Post,User,cloudinary;_1c1‍.x([["createPost",()=>createPost],["uploadImage",()=>uploadImage],["postsByUser",()=>postsByUser],["userPost",()=>userPost],["updatePost",()=>updatePost],["deletePost",()=>deletePost],["newsFeed",()=>newsFeed],["likePost",()=>likePost],["unlikePost",()=>unlikePost],["addComment",()=>addComment],["removeComment",()=>removeComment],["totalPosts",()=>totalPosts]]);_1c1‍.w("../models/post",[["default",["Post"],function(v){Post=v}]]);_1c1‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_1c1‍.w("cloudinary",[["default",["cloudinary"],function(v){cloudinary=v}]]);




cloudinary.config({
    cloud_name: process.env.CLOUDINARY_NAME,
    api_key: process.env.CLOUDINARY_KEY,
    api_secret: process.env.CLOUDINARY_SECRET,

});

       const createPost = async (req,res) =>{
    _1c1‍.g.console.log("post =>", req.body);
    _1c1‍.g.console.log(req);
   const {content, image} = req.body;
   if(!content.length)
   {
       return res.json({
           error: "Content is required",
       });
    }
   try{
     
    const post = new Post({content, image, postedBy: req.auth._id});
    post.save();
    res.json(post);
   }catch(err){
       _1c1‍.g.console.log(err);
       res.sendStatus(400);
   }
};

       const uploadImage = async(req,res) => {
   // console.log("req files => ", req.files);
   try{
    const result = await cloudinary.uploader.upload(req.files.image.path);
    //console.log("Uploaded image ur =>", result);
    res.json({
        url: result.secure_url, //https url
        public_id: result.public_id,
    });
   }catch(err){
       _1c1‍.g.console.log(err);
   }
};

       const postsByUser = async(req,res) => {
    try{
     // const posts = await Post.find({postedBy: req.auth._id}).populate('postedBy','_id fname image').sort({createdAt: -1 }).limit(10);
     // console.log("posts",posts)
     const posts = await Post.find().populate('postedBy','_id fname image').sort({createdAt: -1 }).limit(10);
     res.json(posts);
    }catch(err){
        _1c1‍.g.console.log(err);
    }
};


       const userPost = async (req, res) => {
    try {
      const post = await Post.findById(req.params._id)  .populate("postedBy", "_id fname image")
      .populate("comments.postedBy", "_id fname image");
      res.json(post);
    } catch (err) {
      _1c1‍.g.console.log(err);
    }
  };


         const updatePost = async (req,res) => {
     // console.log("Post update controller =>" , req.body);
     try{
        const post = await Post.findByIdAndUpdate(req.params._id, req.body, {
            new: true,
        });
        res.json(post);
     }catch(err)
     {
         _1c1‍.g.console.log(err)
     }
  };
         const deletePost = async (req,res) => {
    // console.log("Post update controller =>" , req.body);
    try{
       const post = await Post.findByIdAndDelete(req.params._id);
       //remove image from cloudinary
       if(post.image && post.image.public_id){
           const image = await cloudinary.uploader.destroy(post.image.public_id);
       }
       res.json({ok: true});
    }catch(err)
    {
        _1c1‍.g.console.log(err)
    }
 };

        const newsFeed = async (req,res) => {
  
    try{
        
      const user = await User.findById(req.auth._id);
   //   console.log("user"+ user);
      let following = user.following;
      following.push(req.auth._id);
      //pagination
       const currentPage = req.params.page || 1;
       const perPage = 3;

    //  console.log(following);
      const posts = await Post.find({postedBy: { $in : following} }).skip((currentPage - 1) * perPage).populate("postedBy", "_id fname image").populate('comments.postedBy', '_id fname image').sort({createdAt: -1}).limit(perPage);
    //  console.log(posts);
      res.json(posts);
    }catch(err){
      _1c1‍.g.console.log(err)
    }
  };

         const likePost = async(req,res) =>{
    try{
      const post = await Post.findByIdAndUpdate(req.body._id, {
        $addToSet: {likes: req.auth._id},
      },
      {new: true});
      res.json(post);
    }catch(err)
    {
      _1c1‍.g.console.log(err);
    }
  };

         const unlikePost = async(req,res) =>{
    try{
      const post = await Post.findByIdAndUpdate(req.body._id, {
        $pull: {likes: req.auth._id},
      },
      {new: true});
      res.json(post);
    }catch(err)
    {
      _1c1‍.g.console.log(err);
    }
  };

  
       const addComment = async (req, res) => {
  try {
    const { postId, comment } = req.body;
    const post = await Post.findByIdAndUpdate(
      postId,
      {
        $push: { comments: { text: comment, postedBy: req.auth._id } },
      },
      { new: true }
    )
      .populate("postedBy", "_id fname image")
      .populate("comments.postedBy", "_id fname image");
    res.json(post);
  } catch (err) {
    _1c1‍.g.console.log(err);
  }
};

       const removeComment = async (req, res) => {
  try {
    const { postId, comment } = req.body;
    const post = await Post.findByIdAndUpdate(
      postId,
      {
        $pull: { comments: { _id: comment._id } },
      },
      { new: true }
    );
    res.json(post);
  } catch (err) {
    _1c1‍.g.console.log(err);
  }
};

       const totalPosts = async(req,res) => {
  try{
   const total = await Post.find().estimatedDocumentCount();
   res.json(total);
  }catch(err)
  {
    _1c1‍.g.console.log(err);
  }
};